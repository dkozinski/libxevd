xevd_root_dir="//third_party/libxevd/source/libxevd/"

import("//build/config/arm.gni")

import("//third_party/libxevd/build.gni")
import("//third_party/libxevd/xevd_base_sources.gni")
import("//third_party/libxevd/xevd_main_sources.gni")

# Sets the architecture name for building libxevd.
if (current_cpu == "x86") {
  cpu_arch_full = "ia32"
} else if (current_cpu == "x64") {
  if (is_msan) {
    cpu_arch_full = "generic"
  } else {
    cpu_arch_full = "x64"
  }
} else if (current_cpu == "arm") {
  if (arm_use_neon) {
    cpu_arch_full = "arm-neon"
  } else if (is_android) {
    cpu_arch_full = "arm-neon-cpu-detect"
  } else {
    cpu_arch_full = "arm"
  }
} else {
  cpu_arch_full = current_cpu
}

if (is_nacl) {
  platform_include_dir = "source/config/linux/generic"
} else {
  if (is_ios && current_cpu == "arm") {
    os_category = current_os
  } else if (is_posix || is_fuchsia) {
    # Should cover linux, fuchsia, mac, and the ios simulator.
    os_category = "linux"
  } else {  # This should only match windows.
    os_category = current_os
  }
  platform_include_dir = "source/config/$os_category/$cpu_arch_full/config"
}

libxevd_include_dirs = [
  "source/config/config",
  platform_include_dir,
  "source/libxevd/config",
]

config("xevdconfig") {
    #check_includes = false

    include_dirs_base = [ "${xevd_root_dir}/src_base", "${xevd_root_dir}/src_base/sse", "${xevd_root_dir}/src_base/avx",]
    include_dirs_main = [ "${xevd_root_dir}/src_main", "${xevd_root_dir}/src_main/sse",]

    include_dirs = [ "${xevd_root_dir}/inc", "${xevd_root_dir}/config", "//third_party/libxevd/source/config/linux/generic/config"]
    include_dirs += include_dirs_main
    include_dirs += include_dirs_base
    include_dirs += libxevd_include_dirs
    print("libxevd include dirs: ${libxevd_include_dirs}")
    defines = [ "ENABLE_DOOM_MELON" ]
    include_dirs += [ "//third_party/libxevd/source/config/linux/generic/config" ]

    cflags  = [ "-std=c99" ]
    
    if (is_posix) {
        if(is_clang) {
              print("CC: clang")
              cflags += [ "-g", "-O3","-fomit-frame-pointer" ]
              cflags += [ "-Wall","-Werror" ]
              cflags += [ "-Wextra" ]
              cflags += [ "-Wno-unused-function" ]
              cflags += [ "-Wno-unused-but-set-variable" ]
              cflags += [ "-Wno-unused-variable" ]
              cflags += [ "-Wno-attributes" ]
              cflags += [ "-Wno-strict-overflow" ]
              cflags += [ "-Wno-unknown-pragmas" ]
              # cflags += [ "-Wno-stringop-overflow" ]
              cflags += [ "-Wno-pointer-sign" ]
              cflags += [ "-Wno-pointer-to-int-cast" ]
              # cflags += [ "-Wno-maybe-uninitialized" ]
              cflags += [ "-Wno-unused-but-set-parameter" ]

              cflags += [ "-Wno-unused-parameter" ]
              cflags += [ "-Wno-sign-compare" ]
              cflags += [ "-Wno-shift-negative-value" ]
              cflags += [ "-Wno-parentheses-equality" ]
              cflags += [ "-Wno-string-conversion" ]
              cflags += [ "-Wno-ignored-qualifiers" ]
              cflags += [ "-Wno-unreachable-code" ]
              cflags += [ "-Wno-extra-semi" ]
              cflags += [ "-Wno-for-loop-analysis" ]
              cflags += [ "-Wno-unreachable-code-break" ]
              cflags += [ "-Wno-sometimes-uninitialized" ]

              cflags += [ "-pthread" ]
        } else {
              print("CC: gcc")
              cflags += [ "-g", "-O3","-fomit-frame-pointer" ]
              cflags += [ "-Wall","-Werror" ]
              cflags += [ "-Wextra" ]
              cflags += [ "-Wno-unused-function" ]
              cflags += [ "-Wno-unused-but-set-variable" ]
              cflags += [ "-Wno-unused-variable" ]
              cflags += [ "-Wno-attributes" ]
              cflags += [ "-Wno-strict-overflow" ]
              cflags += [ "-Wno-unknown-pragmas" ]
              cflags += [ "-Wno-stringop-overflow" ]
              cflags += [ "-Wno-pointer-sign" ]
              cflags += [ "-Wno-pointer-to-int-cast" ]
              cflags += [ "-Wno-maybe-uninitialized" ]
              cflags += [ "-Wno-sometimes-uninitialized" ]

              cflags += [ "-Wunused-but-set-parameter" ]
              cflags += [ "-pthread" ]
        }
    }
    if (is_posix) {
        cflags += [ "-msse4.1" ]
        cflags += [ "-mavx2" ]
    } 

    if(is_xevd_profile_main) {
        print("XEVD PROFILE MAIN")        
    } else {
        print("XEVD PROFILE BASE")
    }
}

# xevd_sources = [
#   "//inc/xeve.h",
#   "//third_party/libxevd/source/config/linux/generic/config/xevd_exports.h"
# ]

static_library("libxevdb") {
    #sources = xevd_sources
    check_includes = true
    sources = xevd_base_sources
    sources += xevd_base_sse_sources
    sources += xevd_base_avx_sources
    configs += [ ":xevdconfig" ]

    public = [
      "//third_party/libxevd/source/config/linux/generic/config/xevd_exports.h",  # Normal public API for dependent targets.
      "//inc/xevd.h",
    ]
}

static_library("libxevd") {
    check_includes = true

    #sources = xevd_sources
    sources = xevd_main_sources
    sources += xevd_main_sse_sources
    configs += [ ":xevdconfig" ]

    public = [
      "//third_party/libxevd/source/config/linux/generic/config/xevd_exports.h",  # Normal public API for dependent targets.
    ]
}

